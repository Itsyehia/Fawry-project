# ansible/roles/k3s_control_plane/tasks/main.yml
---
- name: Create K3s config directory
  file:
    path: /etc/rancher/k3s
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Configure K3s server with custom skettings
  copy:
    dest: /etc/rancher/k3s/config.yaml
    content: |
      write-kubeconfig-mode: "0644"
      tls-san:
        - {{ ansible_host }}
        - {{ private_ip }}
      bind-address: {{ private_ip }}
      advertise-address: {{ private_ip }}
      node-external-ip: {{ ansible_host }}
  notify: Restart k3s

- name: Install K3s server (control plane)
  shell: curl -sfL https://get.k3s.io | sh -s - server
  args:
    creates: /usr/local/bin/k3s

- name: Wait for K3s server to be ready
  shell: "kubectl get node"
  register: k3s_server_status
  retries: 30
  delay: 10
  until: k3s_server_status.rc == 0

- name: Configure kubectl access with external IP
  shell: |
    mkdir -p ~/.kube
    sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    sudo chown ubuntu:ubuntu ~/.kube/config
    chmod 600 ~/.kube/config
    sudo sed -i "s#127.0.0.1#{{ ansible_host }}#g" ~/.kube/config
    sudo sed -i "s#localhost#{{ ansible_host }}#g" ~/.kube/config
    sudo sed -i "s#{{ private_ip }}#{{ ansible_host }}#g" ~/.kube/config
  args:
    creates: ~/.kube/config

- name: Read K3s node-token
  slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: k3s_token

- name: Set fact for node-token
  set_fact:
    k3s_node_token: "{{ k3s_token['content'] | b64decode | trim }}"

- name: Save node-token for worker
  copy:
    content: "{{ k3s_node_token }}"
    dest: /tmp/node-token
    mode: '0644'

- name: Install AWS CLI
  apt:
    name: awscli
    state: present
    update_cache: yes

- name: Install Docker
  apt:
    name: docker.io
    state: present
    update_cache: yes

- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: yes

- name: Authenticate Docker to ECR
  shell: |
    aws ecr get-login-password --region eu-west-1 | sudo docker login --username AWS --password-stdin 600865703207.dkr.ecr.eu-west-1.amazonaws.com
  environment:
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
  register: ecr_login
  changed_when: "'Login Succeeded' in ecr_login.stdout"

- name: Wait for K3s to be fully ready
  shell: "kubectl get nodes"
  register: nodes_ready
  retries: 30
  delay: 10
  until: nodes_ready.rc == 0 and 'Ready' in nodes_ready.stdout

- name: Install Nginx Ingress Controller
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml
  register: ingress_install
  changed_when: "'created' in ingress_install.stdout or 'configured' in ingress_install.stdout"

- name: Wait for Ingress Controller to be ready
  shell: |
    kubectl wait --namespace ingress-nginx \
      --for=condition=ready pod \
      --selector=app.kubernetes.io/component=controller \
      --timeout=300s
  register: ingress_ready
  retries: 10
  delay: 30
  until: ingress_ready.rc == 0

- name: Patch Ingress Controller service to use NodePort
  shell: |
    kubectl patch service ingress-nginx-controller -n ingress-nginx -p '{"spec":{"type":"NodePort","ports":[{"port":80,"protocol":"TCP","targetPort":80,"nodePort":30080},{"port":443,"protocol":"TCP","targetPort":443,"nodePort":30443}]}}'
  register: ingress_patch
  changed_when: "'patched' in ingress_patch.stdout"
